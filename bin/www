let app = require('../app'),
    deviceApp = require('../devicePort'),
    http = require('http'),
    config = require('../config'),
    https = require('https');

let port = normalizePort(process.env.PORT || config.get('port'));
app.set('port', port);
let server = https.createServer(config.getOnes('httpsOptions'), app);
server.listen(port, function () {
  console.log(`Domain: https://127.0.0.1:${port}/`)
});
server.on('error', onError);

let serverHttp = http.createServer(deviceApp),
    IOTport = config.get('IOTport');
serverHttp.listen(IOTport);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}